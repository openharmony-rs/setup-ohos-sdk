name: Tests

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup SDK
        id: initial-setup
        uses: ./
        with:
          cache: false
      - name: Test
        run: bash -c '"${OHOS_SDK_NATIVE}/llvm/bin/clang" --version'
      - name: Remove previous SDK installation
        env:
          SDK_PATH: "${{ steps.initial-setup.outputs.sdk-path }}"
        run: bash -c 'rm -rf "${SDK_PATH}"'
      - name: Setup SDK with Components
        id: sdk-with-components
        uses: ./
        with:
          components: "native;toolchains"
          cache: false
      - name: Test
        shell: bash
        env:
          SDK_PATH: "${{ steps.sdk-with-components.outputs.sdk-path }}"
        run: |
          ${OHOS_SDK_NATIVE}/llvm/bin/clang --version
          ${SDK_PATH}/*/toolchains/hdc --version
      - name: Remove previous SDK installation
        env:
          SDK_PATH: "${{ steps.sdk-with-components.outputs.sdk-path }}"
        run: bash -c 'rm -rf "${SDK_PATH}"'
      - name: Setup SDK and fixup the path
        id: sdk-with-fixup
        uses: ./
        with:
          fixup-path: true
          cache: false
      - name: Test
        shell: bash
        env:
          SDK_PATH: "${{ steps.sdk-with-fixup.outputs.sdk-path }}"
          API_VERSION: "${{ steps.sdk-with-fixup.outputs.api-version }}"
        run: |
          ${SDK_PATH}/*/${API_VERSION}/native/llvm/bin/clang --version


  build_result:
    name: Result
    runs-on: ubuntu-latest
    needs: ["build"]
    if: ${{ always() }}
    steps:
      - name: Mark the job as successful
        if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
        run: exit 0
      - name: Mark the job as unsuccessful
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: exit 1